<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-200000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Declare variables for pause event
depth = -2000000000000;
// This controller will deactivate all instances in the room
// bisides itself. This means that all instances dissapear when
// being deactivated. The screenshot will be taken before that happens.
// Make sure this controller is in front of everything, even tiles.

game_paused = false;      // If game is paused or not
deactivated = false;      // Whether or not the instances in the room have been deactivated
pause_col=make_color_rgb(40,40,40); // Color of the pause screen (darken the screen)
pause_bg = -1;            // Background to draw on the pause menu
option_roll = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for pause key pressed / unpause

if (global.console_enabled=1) {exit;}

if keyboard_check(ord('P'))
  {
  // This makes sure we press the pause key once
  io_clear();
  // Pause or unpause depending on the visibility of the controller
  if (visible = false) {visible = true;game_paused = true;} else {game_paused = false;}
  }

if (visible = false) {exit;}

// Reactivate all instances and unpause
if (game_paused = false &amp;&amp; deactivated = true)
  {
  // Free memory of background data
  if (background_exists(pause_bg) = true) {background_delete(pause_bg)}
  // Reactivate all objects
  instance_activate_all();
  audio_sound_gain(global.BGMusic, 1, 0);
  audio_play_sound(pause,1,false);
  deactivated = false;
  // Hide pause screen
  visible = false;
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Make sure game is paused

var fnt = font20

if (global.console_enabled=1) {exit;}

if (game_paused = true &amp;&amp; visible = true)
  {
  // Make sure instances are not yet deactivated to capture screen
  if (deactivated = false)
    {
    // Capture the screen
    pause_bg = scr_screen_capture();
    // Deactivate all instances besides this controler
    instance_deactivate_all(true);
    audio_sound_gain(global.BGMusic, global.musicvolume*0.2, 0);
    audio_play_sound(pause,1,false);
    deactivated = true;
    }
  // Draw our pause screen
  draw_background_ext(pause_bg,view_xview[0],view_yview[0],0.5,0.5,0,pause_col,0.8); 
  draw_set_font(font18);
  draw_text_colour((view_xview+view_wview/2-(string_width("Paused")/2)),(view_yview+(view_hview[0]/4)),"Paused",c_white,c_white,c_white,c_white,1);
  draw_set_font(fnt)
  text_draw(view_xview+4,view_yview[0]+90+(font_get_size(fnt)*1)+4,"Jump - "+global.asc_def[real(global.saved_upkey)],c_white)
  text_draw(view_xview+4,view_yview[0]+90+(font_get_size(fnt)*2)+24,"Move Left - "+global.asc_def[real(global.saved_leftkey)],c_white)
  text_draw(view_xview+4,view_yview[0]+90+(font_get_size(fnt)*3)+44,"Move Right - "+global.asc_def[real(global.saved_rightkey)],c_white)
  text_draw(view_xview+4,view_yview[0]+90+(font_get_size(fnt)*4)+64,"Warp/Fast Landing - "+global.asc_def[real(global.saved_downkey)],c_white)
  text_draw(view_xview+4,view_yview[0]+90+(font_get_size(fnt)*5)+84,"Throw Bird Bullets - "+global.asc_def[real(global.saved_throwkey)],c_white)
  text_draw(view_xview+4,view_yview[0]+90+(font_get_size(fnt)*6)+104,"Sprint - "+global.asc_def[real(global.saved_dashkey)],c_white)
  text_draw(view_xview+4,view_yview[0]+90+(font_get_size(fnt)*7)+124,"Toggle Fullscreen - M",c_white)
  draw_set_font(font0);
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

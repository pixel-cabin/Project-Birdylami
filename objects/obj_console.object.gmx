<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>healthgone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>real_speed = 3
tick_shown = 0
object_to_spawn = 0
darkColorL = 0
lightColorL = 0
ob_x = x
ob_y = y
typed_string = keyboard_string
show_text = ""
can_show_text = 0
objectname = 0;
varname = 0;
varvalue = 0;
objnme1 = 0
objvar1 = 0
a = 0
b = -1

keystring_x = view_xview[0]+5
keystring_y = view_yview+view_hview-50


my_string = keyboard_string
explode = " "
numbers = 0
a = 0
i = 0
pos = 0
array[i] = string_copy(my_string, 1, pos-1);
array[0] = ""
array[1] = ""
array[2] = ""
array[3] = ""
array[4] = ""
array[5] = ""
array[6] = ""
array[7] = ""
array[8] = ""
array[9] = ""
array[10] = ""
string_size = 240

ar1 = real(array[1])
ar2 = real(array[2])
ar3 = real(array[3])
ar4 = real(array[4])
ar5 = real(array[5])
ar6 = real(array[6])
ar7 = real(array[7])
ar8 = real(array[8])
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard_string = ""
global.console_enabled = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_text = ""
can_show_text = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard_string = ""

if global.toggle_vsync = 0
{ display_reset(0,false) }

if global.toggle_vsync = 1
{ display_reset(0,true) }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Command Example
//if i = &lt;number of arguments needed&gt;
//{ if string(array[0]) == "/commandname"
//{ do stuff
//}
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG COMMANDS "./debug" &amp; "./debug show &lt;data&gt;"

draw_set_font(font2)

if i = 0
if string(array[0]) == "/debug"
if !instance_exists(displaydebug)
{
                alarm[4] = 180
                instance_create(1,1,displaydebug)
                can_show_text = 1
                show_text = "Debug Enabled! Press Q to disable debug"
}        

if i = 0
if string(array[0]) == "/debug"
{
if instance_exists(displaydebug)
{
                can_show_text = 1
                {
                show_text = "Debug is already Enabled!#Press Q to disable debug"
                alarm[4] = 180
                }
}
}

if i = 1
if string(array[0]) == "/debug"
{ switch(array[1])
{
    case "gameFPS": global.show_debug = 0; break;
    case "mainStats": global.show_debug = 1; break;
    case "loadedObjects": global.show_debug = 2; break;
    case "systemInfo": global.show_debug = 3; break;
    case "enableTime": global.show_time = 1; break;
    case "disableTime": global.show_time = 0; break;
    default:
    { 
    show_text = "No such argument exists: "+array[1]
    can_show_text = 1
    alarm[4] = 180
    }
}
}

if i = 1
if string(array[0]) == "/debug"
{
show_text = "Not Enough Arguments"
can_show_text = 1
alarm[4] = 180
}








objnme1 = array[2]
objvar1 = array[3]
// ./debug showObjectValue &lt;object&gt; &lt;variable&gt;
if i = 3
if string(array[0]) == "/debug"
if string(array[1]) == "showObjectVar"
if object_exists(asset_get_index(array[2]))
{
if instance_exists(array[2])
with (array[2])
{
var myvar = other.objvar1
if !is_undefined(other.objvar1)
    { 
    global.customDebug = real(other.objvar1)
    global.customDebugObject = other.objnme1
    global.customDebugVar = other.objvar1
    }
}
}

draw_set_font(font0)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SETVALUE COMMANDS: ex. "./setlives &lt;amount&gt;" &amp; "./setgems &lt;amount&gt;"
var real1;
real1 = real(array[1])

// ./tp &lt;x&gt; &lt;y&gt;
if i = 2
if (string(array[0]) == "/teleport"
  || string(array[0]) == "/tp") 
  &amp;&amp; (string(real(array[1])) == string(array[1]) &amp;&amp; (string(real(array[2])) == string(array[2])))
  {
  with (mainchar)
  {
  x = real(other.array[1])
  y = real(other.array[2])
  other.show_text = "You teleported to#the coordinates of ("+string(other.array[1])+","+string(other.array[2])+")"
  other.can_show_text = 1
  other.alarm[4] = 400
  }
  }
if i &lt; 2
{ if (string(array[0]) == "/teleport"
  || string(array[0]) == "/tp")
  {
  show_text = "Missing arguments, command syntax is#./tp &lt;x-coord&gt; &lt;y-coord&gt;"
  can_show_text = 1
  alarm[4] = 400
  }
}

// ./tprel &lt;x&gt; &lt;y&gt;
if i = 2
if (string(array[0]) == "/tprel"
  || string(array[0]) == "/tp~") 
  &amp;&amp; (string(real(array[1])) == string(array[1]) &amp;&amp; (string(real(array[2])) == string(array[2])))
  {
  with (mainchar)
  {
  x += real(other.array[1])
  y += real(other.array[2])
  other.show_text = "You teleported to#the coordinates of ("+string(other.array[1])+","+string(other.array[2])+")"
  other.can_show_text = 1
  other.alarm[4] = 400
  }
  }
if i &lt; 2
{ if (string(array[0]) == "/tprel"
  || string(array[0]) == "/tp~")
  {
  show_text = "Missing arguments, command syntax is#./tprel &lt;x-off&gt; &lt;y-off&gt;"
  can_show_text = 1
  alarm[4] = 400
  }
}

// ./roomnav &lt;roomname&gt;
if i = 1
if (string(array[0]) == "/roomnav"
  || string(array[0]) == "/rn") 
if room_exists(asset_get_index(array[1]))
  { 
  audio_stop_all()
  room_goto(asset_get_index(array[1]))
  }
if i = 1  
{ if (string(array[0]) == "/roomnav"
  || string(array[0]) == "/rn")
  if !room_exists(asset_get_index(array[1]))
  {
  other.show_text = "Room "+array[1]+" does not exist! D:"
  other.can_show_text = 1
  other.alarm[4] = 600
  }
}
  
// ./addexp &lt;amount&gt;
if i = 1
{ if (string(array[0]) == "/addexp"
  || string(array[0]) == "/exp+")
  {
  global.add_exp = 1
  global.stamina_exp += real(array[1])
  show_text = "You have acquired: "+string(real1)+" exp!"
  can_show_text = 1
  alarm[4] = 400
  }
}


  // ./set &lt;variable&gt; (integer)
  
if i = 2
{ if (string(array[0]) == "/setvalue"
  || string(array[0]) == "/set")
  {
  switch(string(array[1]))
  {
        case "gems":
        {
        global.currency = real(array[2])
        show_text = "You now have "+array[2]+" gems!"
        can_show_text = 1
        alarm[4] = 400
        } break;
        case "lives":
        {
        global.gamelives = real(array[2])
        show_text = "You now have "+array[2]+" lives!"
        can_show_text = 1
        alarm[4] = 400
        } break;
        case "vspeed":
        {
        view_object[0].vspeed = real(array[2])
        show_text = "Your vertical speed has#been set to "+array[2]
        can_show_text = 1
        alarm[4] = 400
        } break;
        case "hspeed":
        {
        view_object[0].hspeed = real(array[2])
        show_text = "Your horizontal speed has#been set to "+array[2]
        can_show_text = 1
        alarm[4] = 400
        } break;
        case "hp":
        {
        global.marsoehp = real(array[2])
        show_text = "Your health has now been set to "+array[2]+"HP"
        can_show_text = 1
        alarm[4] = 400
        } break;
        default:
        {
        other.show_text = "Error: type ./set (variable) (value)#Your argument is invalid &gt;:)#Usable variables: gems,lives,hspeed,vspeed"
        other.can_show_text = 1
        other.alarm[4] = 600
        }
        }
        }
        }

if i = 1
if string(array[0]) == "/setlives"
{
global.gamelives = real(array[1])
show_text = "You now have "+array[1]+" lives!"
can_show_text = 1
alarm[4] = 180
}

// ./setgems (integer)

if i = 1
if string(array[0]) == "/setgems"
{
global.currency = real(array[1])
show_text = "You now have "+array[1]+" gems!"
can_show_text = 1
alarm[4] = 180
}

// ./godmode
if i = 0
if string(array[0]) == "/godmode"
if global.godmode = 0
{
global.godmode = 1
show_text = "God Mode is now Enabled!"
can_show_text = 1
alarm[4] = 180
}

if i = 0
if string(array[0]) == "/godmode"
if global.godmode = 1
{
global.godmode = 0
show_text = "God Mode is now Disabled!"
can_show_text = 1
alarm[4] = 180
}

// ./setmusicpitch &lt;value&gt;
if i = 1
if (string(array[0]) == "/setmusicpitch"
|| string(array[0]) == "/smp")
{
global.BGPitch = real(array[1])
audio_sound_pitch(global.BGMusic,global.BGPitch)
audio_sound_pitch(global.start_music,global.BGPitch)
audio_sound_pitch(global.world1_theme,global.BGPitch)
show_text = "Pitch has been set to "+array[1]+"!"
can_show_text = 1
alarm[4] = 180
}

// ./setmusicvolume &lt;value&gt;
if i = 1
if (string(array[0]) == "/setmusicvolume"
|| string(array[0]) == "/smv")
if (is_real(real1))
if (real1 &lt;= 1) &amp;&amp; (real1 &gt;= 0)
{
global.musicvolume = real1
audio_sound_gain(global.BGMusic,global.musicvolume,0);
show_text = "Music volume has been set to: "+string(real1*100)+"%"
can_show_text = 1
alarm[4] = 180
}

// ./setsfxvolume &lt;value&gt;
if i = 1
if (string(array[0]) == "/setsfxvolume"
|| string(array[0]) == "/ssv")
if (is_real(real1))
if (real1 &lt;= 1) &amp;&amp; (real1 &gt;= 0)
{
global.soundvolume = real1
audio_sound_gain(global.SND,global.soundvolume,0);
show_text = "SFX volume has been set to: "+string(real1*100)+"%"
can_show_text = 1
alarm[4] = 180
}

// ./timeset &lt;day|(sunrise/sunset)|night&gt;
if i = 1
if (string(array[0]) == "/timeset"
|| string(array[0]) == "/ts")
{
global.ignore_time_phase = "true"
switch(string(array[1]))
    {
    case "day":
        {
        global.time_phase = "day";
        show_text = "Time has been set to: "+string(array[1])
        can_show_text = 1
        alarm[4] = 300
        } break;
    case "sunrise": 
        {
        global.time_phase = "transition";
        show_text = "Time has been set to: "+string(array[1])
        can_show_text = 1
        alarm[4] = 300
        } break;
    case "sunset": 
        {
        global.time_phase = "transition";
        show_text = "Time has been set to: "+string(array[1])
        can_show_text = 1
        alarm[4] = 300
        } break;
    case "night": 
        {
        global.time_phase = "night";
        show_text = "Time has been set to: "+string(array[1])
        can_show_text = 1
        alarm[4] = 300
        } break;     
    default:
        {
        show_text = ""+string(array[1])+" is not an#existing time#Please type#./timeset &lt;day|(sunrise/sunset)|night&gt;"
        can_show_text = 1
        alarm[4] = 300
        }
    }
}




// ./vsync &lt;on/off&gt;
if i = 1
if string(array[0]) == "/vsync"
{ switch(array[1])
{
    case "enable": 
    {
    global.toggle_vsync = 1;
    show_text = "Vsync has been Enabled!"
    can_show_text = 1
    alarm[4] = 180
    }
    break;
    
    case "disable":
    {
    global.toggle_vsync = 0; 
    show_text = "Vsync has been Disabled!"
    can_show_text = 1
    alarm[4] = 180
    }
    break;
    
    default:
    { 
    show_text = "You must either type:#./vsync enable#or#./vsync disable"
    can_show_text = 1
    alarm[4] = 180
    }
}
}









</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ./settileshader &lt;color&gt; &lt;alpha&gt;

if i = 2
if instance_exists(parent_character)
if (string(array[0]) == "/settileshader"
|| string(array[0]) == "/sts")
{
    global.tilecolor1 = real(array[1])
    global.tilecolor1alpha = real(array[2])
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Command Example
// ./mycoords
var cx, cy;
if !instance_exists(view_object[0])
{
                cx = 0;
                cy = 0;
}
if instance_exists(view_object[0])
{
                cx = view_object[0].x
                cy = view_object[0].y
}

if i = 0
if ((string(array[0]) == "/mycoords")
|| (string(array[0]) == "/myxy"))
if instance_exists(view_object[0])
{
                alarm[4] = 180
                can_show_text = 1
                show_text = "Your coordinates are:#( "+string(cx)+" , "+string(cy)+" )"
}        

if i = 0
if string(array[0]) == "/debug"
if !instance_exists(displaydebug)
{
                alarm[4] = 180
                instance_create(1,1,displaydebug)
                can_show_text = 1
                show_text = "Debug Enabled! Press Q to disable debug"
}        

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ./setwindowsize &lt;4:3 scale res&gt; 
//(ex. /setwindowsize 500, will set it to 500x75% of 500)
var rel1, rel2;
rel1 = real(array[1]);
rel2 = real(array[2]);

if i = 1
if (string(array[0]) == "/setwindowsize"
|| string(array[0]) == "/sws")
if (is_real(rel1))
if (rel1 &gt; 199) &amp;&amp; (rel1 &lt; 4097)
{ 
window_set_size(rel1,rel1*0.75)
global.wwindow = rel1
global.hwindow = rel1*0.75
show_text = "Window size set to: "+string(global.wwindow)+"x"+string(global.hwindow)
can_show_text = 1
alarm[4] = 180
}
// ./setviewsize &lt;width&gt; &lt;height&gt;
if i = 2
if (string(array[0]) == "/setviewsize"
|| string(array[0]) == "/svs")
if (is_real(rel1))
if (is_real(rel2))
{ 
view_wport[0] = rel1
view_hport[0] = rel2
surface_resize(application_surface, rel1, rel2);
show_text = "View size set to: "+string(rel1)+"x"+string(rel2)
can_show_text = 1
alarm[4] = 240
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ./setshader &lt;color of darkness&gt; &lt;color of light&gt; &lt;alpha&gt;

if i = 3
if string(array[0]) == "/setshader"
if real(array[3]) &gt; 0 &amp;&amp; real(array[3]) &lt;= 1
{
global.darkColor = real(array[1])
global.lightColor = real(array[2])
global.shaderAlpha = real(array[3])
show_text = "Modifications to the shaders#Have now been set!"
can_show_text = 1
alarm[4] = 180
}

// ./setshader &lt;help&gt;
if i = 1
if string(array[0]) == "/setshader"
if string(array[1]) == "help"
{
show_text = "Syntax for this command is:#./setshader &lt;darkcolor&gt; &lt;lightcolor&gt; &lt;alpha&gt;"
can_show_text = 1
alarm[4] = 180
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn in an Image by Image URL
// ./spawn_image &lt;url&gt; &lt;x&gt; &lt;y&gt;
// ./spawn_image_with_properties &lt;url&gt; &lt;x&gt; &lt;y&gt;
// ./siwp &lt;url&gt; &lt;x&gt; &lt;y&gt;ar4 = real(array[4])
ar1 = real(array[1])
ar2 = real(array[2])
ar3 = real(array[3])
ar5 = real(array[5])
ar6 = real(array[6])
ar7 = real(array[7])
ar8 = real(array[8])
var ob_x, ob_y, isColor;
ob_x = real(array[2])
ob_y = real(array[3])
isColor = is_undefined(array[7])

// ./spawn_image &lt;url&gt; &lt;x&gt; &lt;y&gt; &lt;name&gt;
if i = 4
{ if ((is_real(ob_x)) &amp;&amp; (is_real(ob_y)) &amp;&amp; (is_string(array[4])))
{ if (string(array[0]) == "/spawn_image"
  || string(array[0]) == "/si")
{  with (instance_create(view_object[0].x+ob_x,view_object[0].y+ob_y,obj_customImage))
{  customImage = sprite_add(other.array[1],0,0,0,sprite_get_width(other.array[1])/2,sprite_get_height(other.array[1])/2)
   useProperties = 1
   myName = other.array[4]
}
}
}
}

// ./editimage &lt;property&gt; &lt;value(s)&gt;
if i = 2
{ if (string(array[0]) == "/editimage"
  || string(array[0]) == "/ei")
{ with (obj_customImage)
    { if canEdit = 1
        {
        switch(other.array[1])
        {
        case "xscale": myXscale = other.ar2; break;
        case "yscale": myYscale = other.ar2; break;
        case "rotation": myRot = other.ar2; break;
        case "name": myName = string(other.array[2]); break;
        case "layer": depth = other.ar2; break;
        case "alpha": myAlpha = other.ar2; break;
        case "color": myCol = other.ar2; break;
        default:
            {
            other.show_text = "Invalid Arguments#Your argument is invalid &gt;:)"
            other.can_show_text = 1
            other.alarm[4] = 600
            }
        }
        }
        }
        }
        }
if i = 0
{ if (string(array[0]) == "/exitimageeditor"
  || string(array[0]) == "/eie")
{ with (obj_customImage)
    { canEdit = 0 }
        show_text = "Exited image editor!"
        can_show_text = 1
        alarm[4] = 600
}
}

if i = 1 
if (string(array[0]) == "/editimage"
|| string(array[0]) == "/ei")
if instance_exists(obj_customImage)
{ with (obj_customImage)
    { 
    if myName == other.array[1]
      { canEdit = 1; }
    if myName != other.array[1]
      {
      other.show_text = ""+string(other.array[1])+" is not an existing image!"
      other.can_show_text = 1
      other.alarm[4] = 300
      }
      }
}
      

if i = 0
{ if (string(array[0]) == "/deleteimage"
  || string(array[0]) == "/di")
{ with (obj_customImage)
    { if canEdit = 1
        { 
        other.show_text = ""+string(myName)+" has been deleted!"
        other.can_show_text = 1
        other.alarm[4] = 600
        instance_destroy() }
    }
}
}



// ./spawn_image_with_properties &lt;url&gt; &lt;x&gt; &lt;y&gt; &lt;xscale&gt; &lt;yscale&gt; &lt;rotation&gt; &lt;color&gt; &lt;alpha&gt;
if i = 8
{ if ((is_real(ob_x)) &amp;&amp; (is_real(ob_y)) &amp;&amp; (is_real(ar4)) &amp;&amp; (is_real(ar5)) &amp;&amp; (is_real(ar6)) &amp;&amp; (is_real(ar7)) &amp;&amp; (is_real(ar8)))
{ if ((string(array[0]) == "/spawn_image_with_properties")
  || (string(array[0]) == "/siwp"))
{  with (instance_create(view_object[0].x+ob_x,view_object[0].y+ob_y,obj_customImage))
{  
   customImage = sprite_add(other.array[1],0,0,0,0,0)
   useProperties = 1
   myXscale = real(other.array[4])
   myYscale = real(other.array[5])
   myRot = real(other.array[6])
   myCol = real(other.array[7])
   myAlpha = 1;
   myAlpha = real(other.array[8])
   other.show_text = "Your inputs: xscale: "+string(myXscale)+"#yscale: "+string(myYscale)+"#rot: "+string(myRot)+"#color: "+string(myCol)+"#alpha: "+string(myAlpha)
   other.can_show_text = 1
   other.alarm[4] = 300
}
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SPAWN COMMANDS "./spawn x y &lt;object&gt;" &amp; "./relspawn x y &lt;object&gt;"
var xoffset, yoffset;
xoffset = 0
yoffset = 0

//Command Example
//if i = &lt;number of arguments needed&gt;
//{ if string(array[0]) == "/commandname"
//{ do stuff
//}
//}



draw_set_font(font2)

if i = 3 
{ if string(array[0]) == "/spawn" 
{ if object_exists(asset_get_index(array[1])) 
{ instance_create(ob_x,ob_y,asset_get_index(array[1])) 
                show_text = "Spawned "+array[1]
                can_show_text = 1
                alarm[4] = 180
} 
} 
}

//
// "/relspawn"
//
    
if i = 3
{ if string(array[0]) == "/relspawn"
{ if object_exists(asset_get_index(array[1]))
{ instance_create(view_object[0].x+ob_x,view_object[0].y+ob_y,asset_get_index(array[1]))
                show_text = "Spawned "+array[1]
                can_show_text = 1
                alarm[4] = 180
}
}
}

// ./spawn_clones_in_array &lt;object&gt; &lt;clone amount&gt; &lt;x&gt; &lt;y&gt; &lt;xoffset&gt; &lt;yoffset&gt;

if i = 6
{ if (string(array[0]) == "/spawn_clones_in_array")
  || (string(array[0]) == "/scia")
{ if object_exists(array[1])
{ if (string(real(array[2])) == string(array[2])) &amp;&amp; (string(real(array[3])) == string(array[3])) &amp;&amp; (string(real(array[4])) == string(array[4])) &amp;&amp; (string(real(array[5])) == string(array[5])) &amp;&amp; (string(real(array[6])) == string(array[6])) 
repeat(array[2])
{                
                instance_create((view_object[0].x+real(array[3]))+xoffset,(view_object[0].y+real(array[4]))+yoffset,asset_get_index(array[1]))
                {
                xoffset += real(array[5])
                yoffset += real(array[6])
                }
                show_text = "Spawned "+array[1]
                can_show_text = 1
                alarm[4] = 400
                
                
}
}
}
}

if i &gt;= 0
if i != 6
if (string(array[0]) == "/spawn_clones_in_array")
|| (string(array[0]) == "/scia")
{
 show_text = "Not enough arguments :(#Type ./spawn_clones_in_array #&lt;obj&gt; &lt;amount&gt; &lt;x&gt; &lt;y&gt; &lt;xoff&gt; &lt;yoff&gt;"
 can_show_text = 1
 alarm[4] = 600
}
            
                
draw_set_font(font0)
    
//  ./debug
//  ./debug show loadedObjects
//  ./debug show mainStats
//  ./debug show systemInfo
//
//
//
//
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>3</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.console_enabled = 1
alarm[4] = 1000
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tick_shown = 0
{
tick_shown = 1
}
else
{
tick_shown = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(global.saved_downkey)
if b &gt; 0
{
b-=1
keyboard_string = global.previous_string[b]
}

if keyboard_check_pressed(global.saved_upkey)
if b &lt; 7
{
b+=1
keyboard_string = global.previous_string[b]
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[0]
y = view_yview[0] 

//Borrowed

ob_x = real(array[2])
ob_y = real(array[3])
darkColorL = array[1]
lightColorL = array[2]

objnme1 = array[2]
objvar1 = array[3]

my_string = string(keyboard_string);
explode = " ";

numbers = string_count(explode, my_string);

for( i = 0; i &lt; numbers; i += 1 )
{
    pos = string_pos(explode, my_string);
    array[i] = string_copy(my_string, 1, pos-1);
    my_string = string_delete(my_string, 1, pos);
}

if keyboard_check_pressed(vk_anykey)
{
    my_string += " "
    my_string = string_delete(my_string,string_length(my_string),1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(ord('V'))
{
keyboard_string = keyboard_string + clipboard_get_text()
}

if keyboard_check_pressed(ord('C'))
{
clipboard_set_text(keyboard_string)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var str_wid, str_height, str_rowlength;
str_wid = string_width(keyboard_string)
str_height = string_height(keyboard_string)
str_rowlength = 46

draw_set_font(font20)
if alarm[1] = 0
{
show_text = "When you've finished typing#a command, please press SPACE#then BACKSPACE, otherwise the#command wont register!#(Might fix that later)"
can_show_text = 1
}

if global.console_enabled = 1
{
draw_set_font(font14)
draw_set_alpha(0.7)
draw_rectangle_colour(view_xview[0],view_yview+view_hview-52,view_xview[0]+view_wview,view_yview+view_hview-42,c_black,c_black,c_black,c_black,false)
draw_set_alpha(1)

if tick_shown = 1
if string_size &gt; str_rowlength
{
text_draw( view_xview[0]+5, view_yview+view_hview-50, "&gt; "+string_copy(keyboard_string,string_byte_length(keyboard_string)-(str_rowlength-1),string_byte_length(keyboard_string))+"_",c_yellow)
//text_draw_ext( view_xview[0]+5, view_yview+view_hview-50, "&gt; "+keyboard_string+"_",c_yellow,-1,368)
}

if tick_shown = 0
if string_size &gt; str_rowlength
{
text_draw( view_xview[0]+5, view_yview+view_hview-50, "&gt; "+string_copy(keyboard_string,string_byte_length(keyboard_string)-(str_rowlength-1),string_byte_length(keyboard_string))+"",c_yellow)
//text_draw_ext( view_xview[0]+5, view_yview+view_hview-50, "&gt; "+keyboard_string+"",c_yellow,-1,368)
}

if tick_shown = 1
if string_size &lt;= str_rowlength
{
text_draw( view_xview[0]+5, view_yview+view_hview-50, "&gt; "+keyboard_string+"_",c_yellow);
}

if tick_shown = 0
if string_size &lt;= str_rowlength
{
text_draw( view_xview[0]+5, view_yview+view_hview-50, "&gt; "+keyboard_string+"",c_yellow);
}
}


if can_show_text = 1
{
draw_set_font(font20)
text_draw( view_xview[0]+view_wview[0]-(view_wview*0.98), view_yview+150, string(show_text),c_yellow);
draw_set_font(font0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>3</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if a &lt; 7 {
global.previous_string[a] = string_copy(keyboard_string,1,368)
a += 1
}

if a &gt;= 7 { a = 0 }

//Every time you hit enter, global.previous_string[a] = that string, then adds 1 to "a"
//so that global.previous_string[a+1] is equal to the next string



my_string = string(keyboard_string);
explode = " ";

numbers = string_count(explode, my_string);

for( i = 0; i &lt; numbers; i += 1 )
{
    pos = string_pos(explode, my_string);
    array[i] = string_copy(my_string, 1, pos-1);
    my_string = string_delete(my_string, 1, pos);
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite323</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>parSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump_spd=5 // how hard it jumps
hsp=0 // horisontal speed
vsp=0 // vertical speed
ang=0 // image angle
mass=1 // mass
max_hsp=7 // maximum horisontal speed

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var h = "

//////////////////////
// Object Variables //
//////////////////////

//The default platforming stats for all platforming units.
//Modify these to your heart's content.

max_spd = 9;    //Max hspeed
acc_spd = 0.20;  //hspeed accelaration
jmp_spd = 0;    //Jumping speed(decreases by grv_spd every step)

grv_spd = 0.25;    //vspeed accelaration/gravity
grv_dir = 270;  //gravity direction(0=Right, 90=Up, 180=Left, 270=Down)
air_frc = 0.05; //Number to decrease hspeed by when no key is pressed in air
gnd_frc = 0.01; //Number to decrease hspeed by when no key is pressed on ground
max_slp = 10;    //Highest slope you can climb (in px)

//Required variables, don't mess with 'em

hsp     = 0;
vsp     = 0;
free    = 1;    //Whether you're in the air (1) or on the ground (0)
spr_dir = 1;    //Sprite direction (useful for image_xscale)
hold    = 0;    //Whether you're holding the jump key
"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if y &gt; room_height+64 { instance_destroy() }


if !place_meeting(x,y+1,parSolid) vsp+=0.2; // gravity (mass dont need to write if its value is 1)

if keyboard_check(global.saved_leftkey) {hsp-=0.4} // set horisontal speed with arrows
if keyboard_check(global.saved_rightkey) {hsp+=0.4}

if (!place_meeting(x+1,y+2,parSolid) or !place_meeting(x+2,y+2,parSolid)) &amp;&amp; place_meeting(x,y+1,parSolid) hsp+=1*mass; else // main physics
if (!place_meeting(x+1,y+1,parSolid) or !place_meeting(x+2,y+1,parSolid)) &amp;&amp; place_meeting(x,y+1,parSolid) hsp+=0.75*mass; else
if (!place_meeting(x-1,y+2,parSolid) or !place_meeting(x-2,y+2,parSolid)) &amp;&amp; place_meeting(x,y+1,parSolid) hsp-=1*mass; else
if (!place_meeting(x-1,y+1,parSolid) or !place_meeting(x-2,y+1,parSolid)) &amp;&amp; place_meeting(x,y+1,parSolid) hsp-=0.75*mass; else
if hsp!=0 hsp-=0.25*sign(hsp);

if hsp&gt;max_hsp hsp=max_hsp; // limit horisontal speed
if hsp&lt;-max_hsp hsp=-max_hsp;

ang-=360/sprite_width/pi*sign(hsp)*abs(hsp) // roration of ball !!!!

repeat(abs(hsp)) // ball movement
    {
    if !place_meeting(x+sign(hsp),y+2,parSolid) &amp;&amp; place_meeting(x,y+1,parSolid) {x+=sign(hsp); y+=2} else 
    if !place_meeting(x+sign(hsp),y+1,parSolid) &amp;&amp; place_meeting(x,y+1,parSolid) {x+=sign(hsp); y+=1} else
    if !place_meeting(x+sign(hsp),y,parSolid) x+=sign(hsp); else
    if !place_meeting(x+sign(hsp),y-1,parSolid) &amp;&amp; place_meeting(x,y+1,parSolid) {x+=sign(hsp); y-=0.5 hsp-=0.1*mass*sign(hsp)} else // slow down when climbing up
    if !place_meeting(x+sign(hsp),y-2,parSolid) &amp;&amp; place_meeting(x,y+1,parSolid) {x+=sign(hsp); y-=1 hsp-=0.2*mass*sign(hsp)} else hsp=0;
    }

repeat(abs(vsp))
    {
    if !place_meeting(x,y+sign(vsp),parSolid) y+=sign(vsp); else vsp=0; // vertical speed
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//motion(0,0,0,0,0,0)

//if (place_meeting(x,y+sprite_height/2,parSolid)
//&amp;&amp; !place_meeting(x+1,y+sprite_height/2,parSolid))
//{ hsp -= grv_spd/2 }

//if (place_meeting(x,y+sprite_height/2,parSolid)
//&amp;&amp; !place_meeting(x+1,y+sprite_height/2,parSolid))
//{ hsp += grv_spd/2 }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if ball get stuck in other ball or block(when spawning)
if other.object_index=obj_ball // if its a ball..
    {
    while(place_meeting(x,y,other))
        {
        x+=lengthdir_x(1,point_direction(other.x,other.y,x,y))
        y+=lengthdir_y(1,point_direction(other.x,other.y,x,y))
        }
    } else // if not..
    {
    while(place_meeting(x,y,other))
        {
        x+=lengthdir_x(1,point_direction(other.x+16,other.y+16,x,y)) 
        y+=lengthdir_y(1,point_direction(other.x+16,other.y+16,x,y))
        }
    }
    //not needed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,0,x,y,1,1,ang,c_white,1) // draw sprite of ball
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

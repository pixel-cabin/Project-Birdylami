<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>new_transition</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//A circle that closes in on an object/center of the screen
//It's a persistent object so that we don't have to worry about creating
//another circle effect that zooms out each time a new room starts

//The image is going to zoom in, so its initial size should be VERY big and shrink until it gets very small.
//This is a variable to keep us from having to type "image_xscale/image_yscale" over and over again
scale = 20;

//Delay drawing the circle so that it won't "bloop" into the screen
//this is what "ready" does:
/*
0 = don't draw
1 = zoom in in
2 = zoom out
*/
ready = 0;
alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.transition1 = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Now we can draw the circle
ready = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If it's set to grow, then make it grow. Make it shrink otherwise
if ready = 1 {
    scale -= 0.5;
    }
else if ready = 2 {
    scale += 0.5;
    }
//This makes it stick in the center of the screen. You can replace this with
//whatever object you want it to zoom in on
x = view_xview[0]+(view_wview[0]/2)
y = view_yview[0]+(view_hview[0]/2);

//Make image_xscale and image_yscale equal "scale"
//This is so that the sprite's bounding box will grow/shrink too
image_xscale = scale;
image_yscale = scale;

//Makes the image stay small but keeps it big enough so that it'll keep drawing the black screen
if scale &lt;= 0
    {
    scale = 0.05;
    global.transition1 = 1
    }

//If it's growing and it's bigger than the screen, destroy it
if ready = 2 &amp;&amp; image_xscale &gt; 21
    {
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Circle zooms out
if ready = 1
    ready = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the circle
if ready = 0
    exit;
//Draw the circle sprite
draw_sprite_ext(sprite_index,0,x,y,scale,scale,0,-1,1);

//Now draw black rectangles on all 4 sides of the sprite to make the rest of the screen black

//Top part
draw_rectangle_color(view_xview[0]-1,view_yview[0]-1,view_xview[0]+view_wview[0],bbox_top,0,0,0,0,0);
//bottom part
draw_rectangle_color(view_xview[0]-1,bbox_bottom,view_xview[0]+view_wview[0],view_yview[0]+view_hview[0],0,0,0,0,0);
//left part
draw_rectangle_color(view_xview[0]-1,bbox_top,bbox_left,bbox_bottom,0,0,0,0,0);
//right part
draw_rectangle_color(bbox_right,bbox_top,view_xview[0]+view_wview[0],bbox_bottom,0,0,0,0,0);

//If the sprite gets too small it disappears for some reason and leaves a "window" where you
//can see what's behind it. To prevent this, draw a small black square over the sprite once it gets really small
if scale &lt; 0.5
{
draw_rectangle_color(bbox_left,bbox_top,bbox_right,bbox_bottom,0,0,0,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>new_exp_bar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xpos = (view_wview[0]/2)-26
ypos = view_yview[0]

if instance_exists(scoreboard_obj) {
xposarea = xpos
yposarea = sprite_height
}

toggleCounter = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>toggleCounter = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[0]+xposarea
y = view_yview[0]+yposarea
myexp = global.stamina_exp
if myexp != global.stamina_exp &amp;&amp; toggleCounter = false
{
toggleCounter = true;
alarm[0] = 260;
}

if(global.stamina_exp &gt;= global.required_exp) //LEVEL UP
{
global.stamina_exp = 10;
global.staminalevel += 1; //INCREASE LEVEL
global.required_exp = (30 + (global.staminalevel * 100) - 20); //RESETS MAX XP
global.maxhealth += 2
audio_play_sound(levelup,1,false)
}

if global.staminalevel = 1
{
global.maxhealth = 6
}

if room == titlescreen
{visible = false}

if room != titlescreen
{visible = true}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var x1offset, x2offset, y1offset, y2offset;

x1offset = 2;
y1offset = 2;
x2offset = 97;
y2offset = 4;

if toggleCounter = true
{
draw_rectangle_colour(view_xview[0]+(xposarea+x1offset),view_yview[0]+(yposarea+y1offset),view_xview[0]+(xposarea+x2offset),view_yview[0]+(yposarea+y2offset),c_teal,c_teal,c_teal,c_teal,false)
draw_rectangle_colour(view_xview[0]+(xposarea+x1offset),view_yview[0]+(yposarea+y1offset),view_xview[0]+xposarea+(global.stamina_exp / global.required_exp * (x2offset-5)),view_yview[0]+(yposarea+y2offset),c_yellow,c_yellow,c_yellow,c_yellow,false)
draw_sprite(sprite_index, image_index, view_xview[0]+xposarea, view_yview[0]+yposarea);
draw_set_font(font2)
text_draw(view_xview[0]+xposarea+(sprite_width/2)-(string_width("Level: "+string(global.staminalevel))/2), view_yview[0]+(sprite_height*2.5), "Level: "+string(global.staminalevel),c_white);
draw_set_font(font0)

if global.cooldown &gt; 0.01
{
draw_rectangle_colour(view_xview[0]+(xposarea+x1offset),view_yview[0]+(yposarea+30+y1offset),view_xview[0]+(xposarea+x2offset),view_yview[0]+(yposarea+30+y2offset),c_teal,c_teal,c_teal,c_teal,false)
draw_rectangle_colour(view_xview[0]+(xposarea+x1offset),view_yview[0]+(yposarea+30+y1offset),view_xview[0]+xposarea+(global.cooldown / global.cooldownmax * (x2offset-5)),view_yview[0]+(yposarea+30+y2offset),c_yellow,c_yellow,c_yellow,c_yellow,false)
}
}

//(5,21) Top left corner of HP Bar rectangle
//(156,26) Bottom right corner of HP Bar rectangle

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

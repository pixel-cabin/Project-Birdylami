<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bb_missile_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>parent_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.facing = 0 { } //Do Nothing 
if global.facing = 180 { sprite_index = spr_bb_missile_left; image_angle = 180; }
myspd = 6;
myaccel = 0.20;
alarm[0] = 2;
alarm[1] = 20;
audio_play_sound(bb_missile_create,1,false)
view_object[0] = bb_missile
timestart = 30*(4*(global.staminalevel/1.5))
time = timestart
alarm[2] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.cooldownmax = 10/((1.5*global.staminalevel)/1.2)
global.cooldown = global.cooldownmax
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[3] = 200*(.5/(mean(abs(hspeed),abs(vspeed))))
with (instance_create(x,y,obj_playertrail))
{
if instance_exists(other)
charsprite = other.sprite_index;
chartsubimg = other.image_index;
charsubimg = chartsubimg;
myalpha = 0.7
alarm[0] = 4
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if timestart &gt; 0
{
    timestart -= 1
    alarm[2] = 2
}

if timestart = 0
{
    instance_create(x,y,mainchar)
    instance_destroy()
    audio_play_sound(bb_missile_destroy,1,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = 200*(.5/(mean(abs(hspeed),abs(vspeed))))
audio_play_sound(skid,1,false)
audio_sound_pitch(skid,random_range(0.6,0.85))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 6
if mean(abs(hspeed),abs(vspeed)) &gt; 2
{
with(instance_create(x,y,smokeobj))
    { myalpha = random_range(1.1,1.4) }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myleft = keyboard_check(global.saved_leftkey)
myright = keyboard_check(global.saved_rightkey)
myup = keyboard_check(global.saved_upkey)
mydown = keyboard_check(global.saved_downkey)

image_angle = direction //Rotate Sprite according to direction
if hspeed &gt;= 0 { sprite_index = spr_bb_missile_right }
if hspeed &lt; 0 { sprite_index = spr_bb_missile_left }


if place_meeting(x-1,y,parSolid) //Revert back if collides with solid
    {
    if (!place_meeting(x-1,y,box) &amp;&amp; !place_meeting(x-1,y,obj_crate))
        {
        with(instance_create(x,y,mainchar)) { hsp = 4 }
        instance_destroy()
        audio_play_sound(bb_missile_destroy,1,false)
        }
    }
if place_meeting(x+1,y,parSolid) //Revert back if collides with solid
    {
    if (!place_meeting(x+1,y,box) || !place_meeting(x+1,y,obj_crate))
        {
        with(instance_create(x,y,mainchar)) { hsp = -4 }
        instance_destroy()
        audio_play_sound(bb_missile_destroy,1,false)
        }
    }
if place_meeting(x,y-1,parSolid) //Revert back if collides with solid
    {
    if (!place_meeting(x,y-1,box) || !place_meeting(x,y-1,obj_crate))
        {
        with(instance_create(x,y,mainchar)) { vsp = 4 }
        instance_destroy()
        audio_play_sound(bb_missile_destroy,1,false)
        }
    }
if place_meeting(x,y+1,parSolid) //Revert back if collides with solid
    {
    if (!place_meeting(x,y+1,box) || !place_meeting(x,y+1,obj_crate))
        {
        with(instance_create(x,y,mainchar)) { vsp = -4 }
        instance_destroy()
        audio_play_sound(bb_missile_destroy,1,false)
        }
    }

if myleft
    {
    if hspeed &gt;= -myspd
        {
        hspeed -= myaccel
        }
    }
if myright
    {
    if hspeed &lt;= myspd
        {
        hspeed += myaccel
        }
    }
if myup
    {
    if vspeed &gt;= -myspd
        {
        vspeed -= myaccel
        }
    }
if mydown
    {
    if vspeed &lt;= myspd
        {
        vspeed += myaccel
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

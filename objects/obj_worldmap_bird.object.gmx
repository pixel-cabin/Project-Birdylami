<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>worldmap_marsoe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self()
//draw_set_font(font3)
//text_draw(x+50,y,"isMoving: "+string(isMoving),c_white)
//text_draw(x+50,y+16,"Distance: "+string(distance_to_object(targetmapspace)),c_white)
//text_draw(x+50,y+32,"up: "+string(moveUp),c_white)
//text_draw(x+50,y+48,"down: "+string(moveDown),c_white)
//text_draw(x+50,y+64,"left: "+string(moveLeft),c_white)
//text_draw(x+50,y+80,"right: "+string(moveRight),c_white)
//draw_set_font(font0)"
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.PlayerOne = obj_worldmap_bird
canusecamera = 0
isMoving = 0
currentPosition = 0
affectedCordinate = 0
moveUp = 0
moveDown = 0
moveLeft = 0
moveRight = 0
distanceToMove = 0
image_speed = 0.2
eastmapspace = 0
westmapspace = 0
northmapspace = 0
southmapspace = 0
targetmapspace = 0
eastmp = 0
westmp = 0
northmp = 0
southmp = 0
targetmp = 0
check = 0
check2 = 0
alarm[3] = 5
myspd = 2

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[3] = 5

if check = 1
if myspd &gt; 2
{
with (instance_create(x,y,obj_playertrail))
{
if instance_exists(other.id)
charsprite = other.sprite_index;
chartsubimg = other.image_index;
charsubimg = chartsubimg;
myalpha = 0.6
depth = -9999
alarm[0] = 5
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.BGMusic = global.world1_theme
audio_sound_gain(global.BGMusic,1,0)
check2 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isMoving = 1
    if moveDown = 1
    if distanceToMove &gt; 0
    {
    distanceToMove -= 1
    y += 1
    }
    
if isMoving = 1
    if moveUp = 1
    if distanceToMove &gt; 0
    {
    distanceToMove -= 1
    y -= 1
    }
    
if isMoving = 1
    if moveLeft = 1
    if distanceToMove &gt; 0
    {
    distanceToMove -= 1
    x -= 1
    }
    
if isMoving = 1
    if moveRight = 1
    if distanceToMove &gt; 0
    {
    distanceToMove -= 1
    x += 1
    }
    
if distanceToMove = 0
    if isMoving = 1
    if ((moveDown = 1) || (moveUp = 1) || (moveLeft = 1) || (moveRight = 1))
    {
    distanceToMove = -1
    alarm[0] = 1
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isMoving = 0
moveUp = 0
moveDown = 0
moveLeft = 0
moveRight = 0
downWorldTile = self
upWorldTile = self
leftWorldTile = self
rightWorldTile = self
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cleft, cright, cup, cdown


if global.ignore_time_phase == false
{
time_phase_init()
}

var downWorldTile, upWorldTile, leftWorldTile, rightWorldTile, distanceToMove, something
if keyboard_check(global.saved_dashkey)
{
myspd = 2.5;
}
if !keyboard_check(global.saved_dashkey)
{
myspd = 2;
}


global.current_world = string(room_get_name(room)) //Tells game what world you're currently in

if global.console_enabled = 0
{
if check = 0
if(keyboard_check_pressed(global.saved_throwkey))
if place_meeting(x,y,instance_nearest(x,y,obj_level_icon))
if room_exists(instance_nearest(x,y,obj_level_icon).where_to)
{
audio_stop_all()
instance_destroy()
instance_create(x,y,obj_buffer_worldmap_bird)
}

if canusecamera = 0
{ 
view_object[0] = obj_worldmap_bird 
}

if check = 0 { speed = 0; move_snap(16,16); } 

if(keyboard_check_pressed(global.saved_rightkey)) //MOVING RIGHT
if(position_meeting(x + 32, y, parWorldHorPath))
if check = 0
if moveRight = 0
{
eastmp = instance_nearest(x+64,y,parWorldTile)
check = 1;
audio_play_sound(buttonhover,1,false)
moveRight = 1;
move_towards_point(eastmp.x+24,eastmp.y,myspd)
}
if instance_exists(eastmp)
if distance_to_point(eastmp.x+24,eastmp.y)&lt;=1
if moveRight = 1
{    
speed = 0;
check = 0;
moveRight = 0;
}

if(keyboard_check_pressed(global.saved_leftkey)) //MOVING LEFT
if(position_meeting(x - 32, y, parWorldHorPath))
if check = 0
if moveLeft = 0
{
westmp = instance_nearest(x-64,y,parWorldTile)
check = 1;
audio_play_sound(buttonhover,1,false)
moveLeft = 1;
move_towards_point(westmp.x-9,westmp.y,myspd)
}
if instance_exists(westmp)
if distance_to_point(westmp.x-9,westmp.y)&lt;=1
if moveLeft = 1
{    
speed = 0;
check = 0;
moveLeft = 0;
}

if(keyboard_check_pressed(global.saved_upkey)) //MOVING UP
if(position_meeting(x, y - 32, parWorldVerPath))
if check = 0
if moveUp = 0
{
northmp = instance_nearest(x,y-64,parWorldTile)
check = 1;
audio_play_sound(buttonhover,1,false)
moveUp = 1;
move_towards_point(northmp.x,northmp.y-24,myspd)
}
if instance_exists(northmp)
if distance_to_point(northmp.x,northmp.y-24)&lt;=1
if moveUp = 1
{    
speed = 0;
check = 0;
moveUp = 0;
}

if(keyboard_check_pressed(global.saved_downkey)) //MOVING DOWN
if(position_meeting(x, y + 32, parWorldVerPath))
if check = 0
if moveDown = 0
{
southmp = instance_nearest(x,y+64,parWorldTile)
check = 1;
audio_play_sound(buttonhover,1,false)
moveDown = 1;
move_towards_point(southmp.x,southmp.y+8,myspd)
}
if instance_exists(southmp)
if distance_to_point(southmp.x,southmp.y+8)&lt;=1
if moveDown = 1
{    
speed = 0;
check = 0;
moveDown = 0;
}
}


something = "if (keyboard_check_pressed(vk_down) //Moving DOWN if there is a path
&amp;&amp; (isMoving = 0)
&amp;&amp; (instance_position(x+6,y+30,parWorldVerPath)))
{
    moveDown = 1
    downWorldTile = instance_nearest(self.x,self.y+48,parWorldTile)
    isMoving = 1
        {
        distanceToMove = point_distance(self.x,self.y,downWorldTile.x,downWorldTile.y)
        }
}
   
if keyboard_check_pressed(vk_up) //Moving UP if there is a path
    if isMoving = 0
    if instance_position(self.x+6,self.y-36,parWorldVerPath)
    {
    moveUp = 1
    upWorldTile = instance_nearest(self.x,self.y-48,parWorldTile)
    isMoving = 1
        {
        distanceToMove = point_distance(self.x,self.y,upWorldTile.x,upWorldTile.y)
        }
}

if keyboard_check_pressed(vk_left) //Moving LEFT if there is a path
    if isMoving = 0
    if instance_position(self.x-30,self.y,parWorldHorPath)
    {
    moveLeft = 1
    leftWorldTile = instance_nearest(self.x-48,self.y,parWorldTile)
    isMoving = 1
        {
        distanceToMove = point_distance(self.x,self.y,leftWorldTile.x,leftWorldTile.y)
        }
}

if keyboard_check_pressed(vk_right) //Moving RIGHT if there is a path
    if isMoving = 0
    if instance_position(self.x+30,self.y,parWorldHorPath)
    {
    moveRight = 1
    rightWorldTile = instance_nearest(self.x+48,self.y,parWorldTile)
    isMoving = 1
        {
        distanceToMove = point_distance(self.x,self.y,rightWorldTile.x,rightWorldTile.y)
        }
}"
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
